apply plugin: "jacoco"

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    // https://github.com/gradle/gradle/issues/5184
    jacoco.excludes = ['jdk.internal.*']
    maxParallelForks = Math.max(Runtime.getRuntime().availableProcessors() - 2, 1)
}

task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    reports {
        xml.required.set(true)
        html.required.set(false)
        csv.required.set(false)
    }
    def fileFilter = ['**/BuildConfig.class', 'src/main/gen/**/*', 'src/main/assets/**/*',]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main"
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree, kotlinDebugTree])
    executionData.from = fileTree(dir: project.projectDir, includes: ['**/**/*.exec', '**/**/*.ec'])
}

sonar {

    properties {
        property "sonar.exclusions", "**/BuildConfig.class,**/R.java,**/R\$*.java,src/main/gen/**/*"
        property "sonar.sources", "src/main,build.gradle.kts"
        property "sonar.tests", "src/test"
        property("sonar.coverage.exclusions", "build.gradle.kts")
        property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property "sonar.junit.reportsPaths", "$buildDir/test-results/"
        property "sonar.androidLint.reportPaths", "$buildDir/reports/lint-results-debug.xml"
    }

}
